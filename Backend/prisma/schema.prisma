// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  collection_id Int @id @default(autoincrement()) 
  collection_name String
}

model Category {
  cat_id Int @id @default(autoincrement()) 
  cat_name String
  sub_cat_name String
}


model Book {
  book_id Int @id @default(autoincrement())  
  book_name String
  book_cat_id Int
  book_collection_id Int
  book_launch_date DateTime
  book_publisher String
  record_issuances Issuance[] @relation("BookToIssuance")
  category Category @relation(fields: [book_cat_id], references: [cat_id])
  collection Collection @relation(fields: [book_collection_id], references: [collection_id])
}


model Member {
  mem_id Int @id @default(autoincrement())  
  mem_name String
  mem_phone String
  mem_email String
  record_issuances Issuance[] @relation("MemberToIssuance")
  memberships Membership[]

}


model Issuance {
  issuance_id Int @id @default(autoincrement())
  book_id Int
  book Book @relation("BookToIssuance",fields: [book_id],references: [book_id])
  issuance_member Int
  member Member @relation("MemberToIssuance",fields: [issuance_member],references: [mem_id])
  issuance_date DateTime
  issued_by String
  target_return_date DateTime
  issuance_status String
}

model Membership {
  membership_id Int @id @default(autoincrement())
  member_id Int   
  status String
  member Member @relation(fields: [member_id], references: [mem_id])
}














